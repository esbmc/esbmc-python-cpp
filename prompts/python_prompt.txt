Convert this Python code to C code that can be verified by ESBMC. Translate **ALL** the code, do not partially translate it. Make sure **all methods** are translated completely.

The goal is to verify that this code is working correctly with ESBMC. Hence, **keep all the logic errors**.  
It would be bad if you fix the code and the logical error was thus missed.  
If there is a **compile error**, preserve it and let it show in the code as an **assertion error** rather than a compile error.  
If there is a **logical error**, and it won’t be visible, make it an assertion failure.

The code was originally Python before C++.  
**Avoid using function pointers.** This means **do not pass in pointers** to ANY parameter in ANY function.  
Even if the translated code originally used function pointers, **ignore that** and find an alternative approach.  
**Do not make it multi-threaded** code unless there is threading in the original Python code.

---

## **Guidelines:**
- **Convert ALL Python functions, classes, and logic. Do not omit anything.**
- **Translate Python data structures** to C equivalents:
  - `list` → fixed-size `array` or `struct`
  - `dict` → `struct`
  - `tuple` → `struct` (if needed)
  - `set` → `array` with uniqueness enforcement
- **Use fixed-size arrays** instead of dynamic allocation when possible.
- **Preserve all verification properties and assertions.**
- **Include necessary C headers** (`stdio.h`, `stdlib.h`, `stdbool.h`, `string.h`).
- **Handle assertions correctly:**
  - Keep all assertions as `assert()` **without adding extra conditions**.
  - Use `assert()` instead of `ESBMC_assert()`, which **does not exist**.
  - If there is an **ESBMC-specific assumption**, use `__ESBMC_assume()` directly (never define it yourself).
- **Preserve loops and conditions** exactly as they are in Python.
- **Break complex operations** into smaller, well-structured steps.
- **Keep the same function names in C** as in the Python code.
- **Ensure all function logic is accurately converted**:
  - Equivalent parameter and return types.
  - **All function behavior must match exactly**.
- **Avoid external library functions** unless absolutely necessary.
- **Use proper error handling** equivalent to Python’s `try-except`:
  - If the original Python code **handles exceptions silently**, handle them **silently** in C.
  - If an exception is **raised in Python**, make sure the C version **returns an error code** or prints an error message.
- **Convert randomness correctly**:
  - If the Python code uses `random.randint(0, length-1)`, replace it with `rand()` in C and **do not use nondet_uint()**.
- **Avoid unnecessary type changes**:
  - If Python uses `int`, keep it as `int` in C.
  - If Python uses `bool`, use `bool` (or `_Bool`) in C.
- **Ensure memory management is correct**:
  - Replace Python’s automatic memory management with **manual allocation (`malloc()`) and deallocation (`free()`)** only when needed.
  - Prefer **stack allocation** over `malloc()` when possible.
- **Do not return partial code**—the output must be a **full, functional, and compilable C program**.
- **Avoid function headers that do not exist in C**; instead, create **explicit functions** to solve any Python-specific behavior.

