Convert this Python code to C code that can be verified by ESBMC.

The goal is to verify that this code is working correctly with ESBMC. Hence keep all the logic errors, 
it would be bad if you fix the code and the logical error was thus missed. If there is a compile error, preserve it, 
and let it show in the code as an assertion error on the bad code, rather than a compile error. If there is a logical error, and it wont be visible, make it an assertion failure.



Guidelines:
- Convert Python data structures to C equivalents (lists -> arrays, etc.)
- Use fixed-size arrays instead of dynamic allocation when possible
- Preserve all verification properties and assertions
- Include necessary headers (stdio.h, stdlib.h)
- If the code uses threading:
    * Include pthread.h
    * Use standard pthread functions
    * Ensure thread functions have proper signatures (void* argument, void* return)
    * Add proper mutex initialization and cleanup
    * Keep thread count bounded and explicit
- Handle Python-specific features appropriately
- Keep assertions as assert() without extra conditions
- Keep the loop original semantics. For example, for y in range(1, 5, 1) must be translated to for(y = 1; y < 5; y++). Pay attention to the logical conditions
- Add appropriate error handling
- Keep variable names similar where possible
- Break complex operations into simpler steps
- Keep the same logical assertions in the original and converted code
- Avoid external library functions
- You can convert nondet_uint(), nondet_bool(), (no need to declare it, ESBMC understands these), 


