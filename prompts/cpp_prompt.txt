Convert this C++ code to C code, maintaining the same functionality. Remove any C++ specific features and replace them with C equivalents. 
Keep the verification properties intact.

The goal is to verify that this code is working correctly with ESBMC. Hence keep all the logic errors, 
it would be bad if you fix the code and the logical error was thus missed. If there is a compile error, preserve it, 
and let it show in the code as an assertion error on the bad code. If there is a logical error, and it wont be visible, make it an assertion failure.


General Guidelines:
- The resulting C code has to be verifiable by ESBMC
- Avoid dynamic memory allocation when possible
- Use fixed-size arrays
- Model known results directly instead of computing them
- Break complex operations into simple, verifiable steps
- Avoid external library functions
- Do not fix division by zero
- Keep the original loop semantics. For example, for y in range(1, 5, 1) must be translated to for(y = 1; y < 5; y++) 
- Pay attention to the logial conditions in the loop
- Do not change the logical conditions
- Always include stdio.h and stdlib.h
- Do not oversimplify functions
- Use nondet_uint() without ESBMC keyword
- Keep the same logical assertions
- Keep assertions as assert() without extra conditions
- You can convert nondet_uint(), nondet_bool(), (no need to declare it, ESBMC understands these), 
