Convert this C++ code to C code, maintaining the same functionality. Remove any C++ specific features and replace them with C equivalents.
Keep the verification properties intact.

The goal is to verify that this code is working correctly with ESBMC. Hence keep all the logic errors,
it would be bad if you fix the code and the logical error was thus missed. If there is a compile error, preserve it,
and let it show in the code as an assertion error on the bad code. If there is a logical error, and it wont be visible, make it an assertion failure.

The code was originally python code before C++.
Avoid using function pointers. This means do not pass in pointers to ANY param in ANY function.
Even if code was translated like that, ignore that code.
Do not make it multi-threaded code unless there is threading in the code.



General Guidelines:
- The resulting C code has to be verifiable by ESBMC
- Avoid dynamic memory allocation when possible
- Use fixed-size arrays
- Model known results directly instead of computing them
- Break complex operations into simple, verifiable steps
- Avoid external library functions
- Keep the original loop semantics
- Pay attention to the logial conditions in the loop
- Do not change the logical conditions
- Always include stdio.h and stdlib.h
- Do not oversimplify functions
- Use nondet_uint() without ESBMC keyword
- Keep the same logical assertions
- Keep assertions as assert() without extra conditions
- You can convert nondet_uint(), nondet_bool(), (no need to declare it, ESBMC understands these),
- Do not convert random.randint(0, length-1) to nondet, use the random function directly, do not Using nondet_uint() for verification if the value range is given
- If the original code you are converting handles exceptions, make sure the same exceptions are caught in the C version too. Follow the same logic in python if an exception is caught.
- If the code coming from python silently handles the exception, you should also handle it silently. In this case the assertion should not be raised. Handle the assertion with just a print statement in this case. A good example is when there is a pass command in an exception block.
- If the code coming from python raises an exception, you should also raise an exception.
